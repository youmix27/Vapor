@page "/weather"

@using POCSQLCO.Models
@rendermode InteractiveServer
@inject Models.IVaporService VaporService
@using System.Net.Http.Json
@inject IDialogService DialogService

<br />
<MudButton OnClick="@AjouterGenre" Variant="Variant.Filled"  Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>
<br />
<MudDataGrid T="Genre" Items="@genres" StartedEditingItem="@ModifierGenre" CanceledEditingItem="@SupprimerGenre"
             Bordered="true" Dense="true">
    <Columns>
        <PropertyColumn Property="x => x.Id.ToString()" Title="Nr" IsEditable="false" />
        <PropertyColumn Property="x => x.Libelle" />
        <TemplateColumn  CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Size="@Size.Small" Variant="Variant.Text" Color="@Color.Primary" @onclick="() => ModifierGenre(context.Item)">Modifier</MudButton>
                    <MudButton Size="@Size.Small" Variant="Variant.Text" Color="@Color.Warning" @onclick="() => SupprimerGenre(context.Item)">Supprimer</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
     </Columns>
 </MudDataGrid>



@code {
    public int i = -1;
    public IEnumerable<Genre> genres { get; set; }
    private List<string> _events = new();
    protected override void OnInitialized()
    {
        genres = VaporService.FindAllGenres();
    }
    private void SubmitForm()
    {
        VaporService.UpdateGenre(genres.ElementAt(i));
    }

    // events
    async Task ModifierGenre(Genre genre)
    {
        var parameters = new DialogParameters<EditGenre> { { x => x.genre, genre } };
        var dialog = await DialogService.ShowAsync<EditGenre>("Modifier genre", parameters);
        var result = await dialog.Result;
        genres = VaporService.FindAllGenres();
    }

    async Task SupprimerGenre(Genre genre)
    {
        var parameters = new DialogParameters<SupprimerGenre> { { x => x.genre, genre } };
        var dialog = await DialogService.ShowAsync<SupprimerGenre>("Supprimer genre", parameters);
        var result = await dialog.Result;
        genres = VaporService.FindAllGenres();
    }

    async Task AjouterGenre()
    {
        var dialog = await DialogService.ShowAsync<AjouterGenre>("Ajouter genre");
        var result = await dialog.Result;
        genres = VaporService.FindAllGenres();
    }
}
