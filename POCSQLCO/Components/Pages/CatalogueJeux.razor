@page "/Catalogue"

@using POCSQLCO.Models
@inject Models.IVaporService VaporService
@using System.Net.Http.Json
@inject NavigationManager navManager
@rendermode InteractiveServer

<PageTitle>Catalogue Jeux</PageTitle>

<div class=" m-4">
<MudItem xs="12" sm="6" md="4">
    <MudAutocomplete T="string" Label="Genre" Value="Genre" ValueChanged="FiltreGenre" SearchFunc="@Search2"
                     ResetValueOnEmptyText=true
                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
</MudItem>
</div>

<MudDataGrid 
    T="Jeu"
    Items="@Jeux"
    Filterable="true" 
    Virtualize="true" 
    FixedHeader="true"  
    FilterMode="@DataGridFilterMode.ColumnFilterRow" 
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" 
    RowClick="@RowClicked" 
    Hover="true" 
    RowClass="cursor-pointer">
    <Columns>
        <TemplateColumn CellClass="d-flex" Filterable="false">
            <CellTemplate>
                <MudImage ObjectFit="ObjectFit.Contain" Height="100" Src="@GetJeuSource(context.Item.Jaquette)" Alt="@context.Item.Jaquette" Elevation="25" Class="rounded-lg" />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Libelle" />
        <PropertyColumn Property="x => x.Prix" Filterable="false" />
    </Columns>
</MudDataGrid>



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    public IEnumerable<Jeu> Jeux { get; set; }

    public IEnumerable<Genre> Genres { get; set; }

    public String Genre { get; set; } = String.Empty;

    public IEnumerable<Theme> Themes { get; set; }

    public String Theme { get; set; }

    public string PreviewText { get; set; } = "A VENIR";

    protected override async void OnInitialized()
    {
        var authState = await authenticationState;
        if (authState.User.Identity.Name != null)
        {
            Utilisateur utilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);
            Jeux = VaporService.FindJeuxWithUtilisateur(utilisateur);
        }
        else
        {
            Jeux = VaporService.FindAllJeux();
        }
        Genres = VaporService.FindAllGenres();
        Themes = VaporService.FindAllThemes();
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return Genres.Select(x => x.Libelle).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private string GetJeuSource(string jaquette)
    {
        return "img/jeux/" + jaquette + ".jpg";
    }

    private void RowClicked(DataGridRowClickEventArgs<Jeu> args)
    {
        navManager.NavigateTo("/Jeu/" + args.Item.Jaquette);
    }

    private async void FiltreGenre(string value)
    {
        Genre = value;
        var authState = await authenticationState;
        if (authState.User.Identity.Name != null)
        {
            Utilisateur utilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);
            Jeux = VaporService.FindJeuxWithUtilisateurAndGenre(utilisateur, Genre);
        }
        else
        {
            Jeux = VaporService.FindJeuxByGenre(Genre);
        }
    }

}
