@page "/Catalogue"

@using POCSQLCO.Models
@inject Models.IVaporService VaporService
@using System.Net.Http.Json
@inject NavigationManager navManager
@rendermode InteractiveServer

<PageTitle>Catalogue Jeux</PageTitle>

<div class=" m-4">
<MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="string" Label="Genre" Value="Genre" ValueChanged="FiltreGenre" SearchFunc="@SearchGenre"
                     ResetValueOnEmptyText=true
                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
</MudItem>
</div>

<MudDataGrid 
    T="Jeu"
    Items="@Jeux"
    Filterable="true" 
    Virtualize="true" 
    FixedHeader="true"  
    FilterMode="@DataGridFilterMode.ColumnFilterRow" 
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" 
    RowClick="@RowClicked" 
    Hover="true" 
    RowClass="cursor-pointer">
    <Columns>
        <TemplateColumn CellClass="d-flex" Filterable="false">
            <CellTemplate>
                <MudImage ObjectFit="ObjectFit.Contain" Height="100" Src="@context.Item.GetJeuSource()" Alt="@context.Item.Jaquette" Elevation="25" Class="rounded-lg" />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Libelle" />
        <PropertyColumn Property="x => x.Prix" Filterable="false" />
    </Columns>
</MudDataGrid>



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    public IEnumerable<Jeu> Jeux { get; set; }

    public IEnumerable<Genre> Genres { get; set; }

    public String Genre { get; set; } = String.Empty;

    public IEnumerable<Theme> Themes { get; set; }

    public String Theme { get; set; }

    public string PreviewText { get; set; } = "A VENIR";

    protected override async void OnInitialized()
    {
        var authState = await authenticationState;
        if (authState.User.Identity.Name != null) // on vérifié si l'utilisateur est authentifié pour pouvoir lui appliquer les filtres propres à son compte
        {
            Utilisateur utilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);
            Jeux = VaporService.FindJeuxWithUtilisateur(utilisateur);
        }
        else //si l'utilisateur est non-authentifié, aucun filtre par défaut n'est appliqué
        {
            Jeux = VaporService.FindAllJeux();
        }
        Genres = VaporService.FindAllGenres();
        Themes = VaporService.FindAllThemes();
    }

    /*
     * renvoie l'auto-complétion du filtre par genre
     */
    private async Task<IEnumerable<string>> SearchGenre(string value)
    {
        await Task.Delay(5);

        // si le champ est vide, l'auto-complétion ne renvoie rien
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return Genres.Select(x => x.Libelle).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    /*
     * Renvoie l'utilisateur sur la page du jeu cliqué
     */
    private void RowClicked(DataGridRowClickEventArgs<Jeu> args)
    {
        navManager.NavigateTo("/Jeu/" + args.Item.Jaquette);
    }

    /*
     * Méthode permettant de filtrer les jeux selon le genre sélectionner par l'utilisateur
     */
    private async void FiltreGenre(string value)
    {
        var authState = await authenticationState;
        if (!string.IsNullOrEmpty(value)) // on s'assure que le champ ne soit pas vide
        {
            Genre = value;
            if (authState.User.Identity.Name != null)
            {
                Utilisateur utilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);
                Jeux = VaporService.FindJeuxWithUtilisateurAndGenre(utilisateur, Genre);
            }
            else
            {
                Jeux = VaporService.FindJeuxByGenre(Genre);
            }
        }
        else //si il est vide, on affiche l'ensemble du catalogue non filtré par genre
        {
            if (authState.User.Identity.Name != null)
            {
                Utilisateur utilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);
                Jeux = VaporService.FindJeuxWithUtilisateur(utilisateur);
            }
            else
            {
                Jeux = VaporService.FindAllJeux();
            }
        }
    }

}
