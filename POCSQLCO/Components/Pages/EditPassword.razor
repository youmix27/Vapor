@using POCSQLCO.Models
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@inject ISnackbar Snackbar
@inject Models.IVaporService VaporService
@rendermode InteractiveServer

<EditForm Model=@newPassword OnValidSubmit="Modifier">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                Modifier Le mot de passe
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField @bind-Value="newPassword.AncienPassword" For="@(() => newPassword.AncienPassword)" InputType="InputType.Password" Label="Ancien Mot de Passe" />

            <MudTextField @bind-Value="newPassword.NouveauPassword" For="@(() => newPassword.NouveauPassword)" InputType="InputType.Password" Label="Nouveau Mot de Passe" />
            <MudTextField @bind-Value="newPassword.NouveauPassword2" For="@(() => newPassword.NouveauPassword2)" InputType="InputType.Password" Label="Confirmation Nouveau Mot de Passe" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Annuler</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Ajouter</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; }

    NewPassword newPassword = new NewPassword();
    Utilisateur oldUtilisateur = new Utilisateur();

    public class NewPassword
    {
        [Required(ErrorMessage = "Veuillez préciser l'ancien mot de passe")]
        public string AncienPassword { get; set; }

        [Required(ErrorMessage = "Veuillez préciser le nouveau mot de passe")]
        [StringLength(30, ErrorMessage = "Le mot de passe doit faire 8 char minimum.", MinimumLength = 8)]
        public string NouveauPassword { get; set; }

        [Required(ErrorMessage = "Veuillez préciser la confirmation du nouveau mot de passe")]
        [Compare(nameof(NouveauPassword), ErrorMessage ="les deux mots de passes sont différents")]
        public string NouveauPassword2 { get; set; }
    }

    protected override async void OnInitialized()
    {
        var authState = await authenticationState;
        oldUtilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);

    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private  void Modifier()
    {
        if (BCrypt.Net.BCrypt.Verify(newPassword.AncienPassword, oldUtilisateur.HashMdp))
        {
            oldUtilisateur.HashMdp = BCrypt.Net.BCrypt.HashPassword(newPassword.NouveauPassword);
            VaporService.UpdateUtilisateur(oldUtilisateur);
            Snackbar.Add("mot de passe modifié", Severity.Success);
            MudDialog.Close(DialogResult.Ok(oldUtilisateur.Id));
        }
        else
        {
            Snackbar.Add("mot de passe précédent différent de l'original", Severity.Error);
        }

    }
}