@page "/panier"
@using POCSQLCO.Models
@using Microsoft.AspNetCore.Authorization
@inject Models.IVaporService VaporService
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Administrator, User")]
@rendermode InteractiveServer


<PageTitle>Mon Panier</PageTitle>

@if (ContenuPanier.Count() != 0)
{
<MudDataGrid T="ContenuCommande" Items="@ContenuPanier">
    <Columns>
        <TemplateColumn>
            <CellTemplate>
                    <MudImage ObjectFit="ObjectFit.Contain" Height="100" Src="@context.Item.Jeu.GetJeuSource()" Alt="@context.Item.Jeu.Jaquette" Elevation="25" Class="rounded-lg" />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Jeu.Libelle" />
        <PropertyColumn Property="x => x.Jeu.Prix" />
        <TemplateColumn Title="Quantité">
            <CellTemplate>
                    <MudNumericField T="int" Value="context.Item.Quantite" ValueChanged="(int value) => UpdateQuantite(value, context.Item)" Min="1" Max="10" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn >
            <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="() => DeleteJeuFromCart(context.Item)"></MudIconButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
    <MudText Typo="Typo.h6" Class="ml-4">Totale : <b>@PrixTotale</b></MudText>
    <MudButton Class="ml-4"  Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ValidateCart()">valider le panier</MudButton>
}else{
    <MudAlert Severity="Severity.Info" Class="mt-4">Vous n'avez actuellement pas de panier.</MudAlert>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    public Commande? Commande { get; set; }

    public IEnumerable<ContenuCommande> ContenuPanier { get; set; }

    public decimal PrixTotale { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        Utilisateur utilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);
        Commande = VaporService.FindCommandeNonTermineByUtilisateur(utilisateur);
        ContenuPanier = VaporService.FindAllContenuCommandesByUtilisateurAndCommandeNonTerminee(utilisateur);
        foreach(ContenuCommande jeuPanier in ContenuPanier)
        {
            PrixTotale += (decimal)jeuPanier.Jeu.Prix * jeuPanier.Quantite;
        }
    }

    /*
    * Met à jour le champ quantite dans la base de donnée et recharge la page
    */
    protected void UpdateQuantite(int value, ContenuCommande contenuCommande)
    {
        contenuCommande.Quantite = value; 
        VaporService.UpdateContenuCommande(contenuCommande);
        navManager.NavigateTo("/panier", true); //on recharge la page pour mettre à jour le total du panier
    }

    /*
     * Supprime le jeu du panier de l'utilisateur
     */
    protected void DeleteJeuFromCart(ContenuCommande Produit)
    {
        VaporService.DeleteContenuCommande(Produit);
    }

    /*
     * Valide le panier de l'utilisateur
     */
    protected void ValidateCart()
    {
        Commande.EstTermine = true;
        Commande.Date = DateOnly.FromDateTime(DateTime.Now);
        VaporService.UpdateCommande(Commande);
        navManager.NavigateTo("/Merci_De_Votre_Achat");
    }
}
