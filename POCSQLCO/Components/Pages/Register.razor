@page "/register"

@using POCSQLCO.Models
@using Microsoft.AspNetCore.Cryptography.KeyDerivation;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@inject ISnackbar Snackbar
@inject Models.IVaporService VaporService
@inject NavigationManager NavManager

<EditForm Model=@nouvelUtilisateur OnValidSubmit="RegisterUtilisateur">
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
                <MudTextField @bind-Value="nouvelUtilisateur.Pseudo" For="@(() => nouvelUtilisateur.Pseudo)" Label="Pseudo" />
                <MudTextField @bind-Value="nouvelUtilisateur.Password" For="@(() => nouvelUtilisateur.Password)" Label="Mot de passe" HelperText="choisissez un mdp fort" InputType="InputType.Password" />
                <MudTextField @bind-Value="nouvelUtilisateur.Password2" For="@(() => nouvelUtilisateur.Password2)" Label="Mot de passe" HelperText="répéter le mot de passe" InputType="InputType.Password" />
                <MudTextField @bind-Value="nouvelUtilisateur.Email" For="@(() => nouvelUtilisateur.Email)" Label="Mail" />
                <MudTextField @bind-Value="nouvelUtilisateur.Nom" For="@(() => nouvelUtilisateur.Nom)" Label="Nom" />
                <MudTextField @bind-Value="nouvelUtilisateur.Prenom" For="@(() => nouvelUtilisateur.Prenom)" Label="Prenom" />
                <MudTextField @bind-Value="nouvelUtilisateur.Ville" For="@(() => nouvelUtilisateur.Ville)" Label="Ville" />
                <MudTextField @bind-Value="nouvelUtilisateur.CodePostal" For="@(() => nouvelUtilisateur.CodePostal)" Label="Code Postal" />
                <MudTextField @bind-Value="nouvelUtilisateur.Adresse" For="@(() => nouvelUtilisateur.Adresse)" Label="Adresse" />
                <MudTextField @bind-Value="nouvelUtilisateur.Telephone" For="@(() => nouvelUtilisateur.Telephone)" Label="Numéro de Téléphone" />
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" ButtonType="ButtonType.Submit">Créer compte</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" Href="/login">Annuler</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
</EditForm>

@code {
    Utilisateur utilisateur = new Utilisateur();
    NewUtilisateur nouvelUtilisateur = new NewUtilisateur();

    public class NewUtilisateur
    {
        [Required]
        [StringLength(12, ErrorMessage = "Pseudo trop longue. (max char : 12)")]
        public string Pseudo { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Le mot de passe doit faire 8 char minimum.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }
        [Required]
        [StringLength(20, ErrorMessage = "Nom trop long (max : 20 char)")]
        public string Nom { get; set; }
        [StringLength(20, ErrorMessage = "Prenom trop long (max : 20 char)")]
        [Required]
        public string Prenom { get; set; }
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        [StringLength(20, ErrorMessage = "Ville trop longue. (max char : 20)")]
        public string Ville { get; set; }
        [Required]
        [StringLength(100, ErrorMessage = "Adresse trop longue. (max char : 100)")]
        public string Adresse { get; set; }
        [Required]
        [RegularExpression(@"^(?:0[1-9]|[1-8]\d|9[0-8]|2[ABab])\d{3}$", ErrorMessage = "Code postal invaldie")]
        public string CodePostal { get; set; }
        [Required]
        [RegularExpression(@"^0\d{9}$", ErrorMessage = "Numéro de téléphone invaldie")]
        public string Telephone { get; set; }

    }

    public void RegisterUtilisateur(EditContext context)
    {
        Utilisateur utilisateur = VaporService.FindUtilisateurByPseudo(nouvelUtilisateur.Pseudo);
        if (utilisateur == null)
        {
            utilisateur.Pseudo = nouvelUtilisateur.Pseudo;
            utilisateur.Email = nouvelUtilisateur.Email;
            utilisateur.Adresse = nouvelUtilisateur.Adresse;
            utilisateur.Telephone = nouvelUtilisateur.Telephone;
            utilisateur.FiltreCs = true; //par défaut on filtre les contenus explicites, l'utilisateur devra le modifié manuellement dans les paramètres de son compte
            utilisateur.FiltreGore = true;
            utilisateur.CodePostal = nouvelUtilisateur.CodePostal;
            utilisateur.Ville = nouvelUtilisateur.Ville;
            utilisateur.Nom = nouvelUtilisateur.Nom;
            utilisateur.Prenom = nouvelUtilisateur.Prenom;
            utilisateur.IsAdmin = false;
            //création hash mot de passe
            utilisateur.HashMdp = BCrypt.Net.BCrypt.HashPassword(nouvelUtilisateur.Password);
            VaporService.InsertUtilisateur(utilisateur);
            NavManager.NavigateTo("/login");
            Snackbar.Add("compte créé", Severity.Success);
        }
        else
        {
            Snackbar.Add("Pseudo déjà utilisé", Severity.Error);
        }
    }

}