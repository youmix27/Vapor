@page "/login"

@using POCSQLCO.Authentification
@using POCSQLCO.Models
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime js
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject Models.IVaporService VaporService

<EditForm Model=@utilisateur OnValidSubmit="LoginUtilisateur">
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
                <MudTextField T="string" @bind-Value="utilisateur.Pseudo" For="@(() => utilisateur.Pseudo)" Label="Username" Required/>
                <MudTextField T="string" @bind-Value="utilisateur.HashMdp" For="@(() => utilisateur.HashMdp)" Label="Password" Required HelperText="Choose a strong password"
                              InputType="InputType.Password" />
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" ButtonType="ButtonType.Submit">Se Connecter</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" Href="/register">Créer un compte</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
</EditForm>

@code {
    Utilisateur utilisateur = new Utilisateur();


    private async Task LoginUtilisateur(EditContext context)
    {
        Utilisateur BDDUtilisateur = VaporService.FindUtilisateurByPseudo(utilisateur.Pseudo);
        if (BDDUtilisateur == null || !BCrypt.Net.BCrypt.Verify(utilisateur.HashMdp, BDDUtilisateur.HashMdp))
        {
            Snackbar.Add("pseudo ou mot de passe invalide", Severity.Error);
            return;
        }

        var auth = (Auth)authStateProvider;
        await auth.UpdateAuthentificationState(new UserSession
            {
                UserName = BDDUtilisateur.Pseudo,
                IsAdmin = (bool)BDDUtilisateur.IsAdmin
            });
            navManager.NavigateTo("/", true);
    }
}