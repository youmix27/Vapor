@page "/Account/Register"

@using POCSQLCO.Models
@using Microsoft.AspNetCore.Cryptography.KeyDerivation;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@using POCSQLCO.Models.ViewModels
@inject ISnackbar Snackbar
@inject Models.IVaporService VaporService
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>Création de compte</PageTitle>

<EditForm Model=@Model OnValidSubmit="RegisterUtilisateur">
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
                <MudTextField @bind-Value="Model.Pseudo" For="@(() => Model.Pseudo)" Label="Pseudo" />
                <MudTextField @bind-Value="Model.Password" For="@(() => Model.Password)" Label="Mot de passe" HelperText="choisissez un mdp fort" InputType="InputType.Password" />
                <MudTextField @bind-Value="Model.Password2" For="@(() => Model.Password2)" Label="Mot de passe" HelperText="répéter le mot de passe" InputType="InputType.Password" />
                <MudTextField @bind-Value="Model.Email" For="@(() => Model.Email)" Label="Mail" />
                <MudTextField @bind-Value="Model.Nom" For="@(() => Model.Nom)" Label="Nom" />
                <MudTextField @bind-Value="Model.Prenom" For="@(() => Model.Prenom)" Label="Prenom" />
                <MudTextField @bind-Value="Model.Ville" For="@(() => Model.Ville)" Label="Ville" />
                <MudTextField @bind-Value="Model.CodePostal" For="@(() => Model.CodePostal)" Label="Code Postal" />
                <MudTextField @bind-Value="Model.Adresse" For="@(() => Model.Adresse)" Label="Adresse" />
                <MudTextField @bind-Value="Model.Telephone" For="@(() => Model.Telephone)" Label="Numéro de Téléphone" />
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudAlert Class="mb-4" Severity="Severity.Error" hidden="@ErrorPseudo">Nom d'utilisateur déjà utilisé par un autre compte'</MudAlert>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" ButtonType="ButtonType.Submit">Créer compte</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" Href="/Account/Login">Annuler</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public NouvelUtilisateur Model { get; set; } = new NouvelUtilisateur();

    public Utilisateur utilisateur { get; set; }
    public bool ErrorPseudo { get; set; } = true;

    public void RegisterUtilisateur(EditContext context)
    {
        Utilisateur utilisateur = VaporService.FindUtilisateurByPseudo(Model.Pseudo);
        if (utilisateur == null)
        {
            utilisateur = new Utilisateur();
            utilisateur.Pseudo = Model.Pseudo;
            utilisateur.Email = Model.Email;
            utilisateur.Adresse = Model.Adresse;
            utilisateur.Telephone = Model.Telephone;
            utilisateur.FiltreCs = true; //par défaut on filtre les contenus explicites, l'utilisateur devra le modifié manuellement dans les paramètres de son compte
            utilisateur.FiltreGore = true;
            utilisateur.CodePostal = Model.CodePostal;
            utilisateur.Ville = Model.Ville;
            utilisateur.Nom = Model.Nom;
            utilisateur.Prenom = Model.Prenom;
            utilisateur.IsAdmin = false;
            //création hash mot de passe
            utilisateur.HashMdp = BCrypt.Net.BCrypt.HashPassword(Model.Password);
            VaporService.InsertUtilisateur(utilisateur);
            NavManager.NavigateTo("/Account/Login");
        }
        else
        {
            ErrorPseudo = false;
        }
    }

}