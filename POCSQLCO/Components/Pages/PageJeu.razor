@page "/Jeu/{jacquette}"
@using POCSQLCO.Models
@inject Models.IVaporService VaporService
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>@Jeu.Libelle</PageTitle>

    <div class="d-flex justify-center">
        <MudPaper Width="80%" Class="">
            <MudContainer Class="mt-4" Fixed="true">
                <MudGrid Justify="Justify.FlexStart">
                    <MudItem xs="12" sm="8" md="6">
                    <MudText Align="Align.Left" Typo="Typo.h4">@Jeu.Libelle</MudText>
                        <MudImage ObjectFit="ObjectFit.Contain" Src="@Jeu.GetJeuSource()" Alt="@Jeu.Jaquette" Elevation="25" Class="rounded-lg mx-auto mt-2" />
                    <MudText Align="Align.Left" Class="m-2">@Jeu.Description</MudText>
                    @if (Jeu.DateDeSortie is not null)
                    {
                        <MudText Align="Align.Left">Date de Sortie : @Jeu.DateDeSortie.ToString()</MudText>
                    }
                    else
                    {
                        <MudText Align="Align.Left">Date de Sortie : inconnu</MudText>
                    }
                    @if (Jeu.Distributeur is not null)
                    {
                    <MudText Align="Align.Left">Distributeur : @Jeu.Distributeur.Libelle</MudText>
                    }
                    @if (Jeu.Developpeur is not null)
                    {
                    <MudText Align="Align.Left">Développeur : @Jeu.Developpeur.Libelle</MudText>
                    }
                    <MudText Align="Align.Left">
                        Genre.s : 
                        @foreach (Genre genre in Jeu.Genres)
                        {
                            <span>@genre.Libelle, </span>
                        }
                    </MudText>
                    <MudText Align="Align.Left">
                        Thème.s : 
                        @foreach (Theme theme in Jeu.Themes)
                        {
                            <span>@theme.Libelle, </span>
                        }
                    </MudText>

                    @switch (ExcpetionAchatJeu)
                    {
                        case "aucune":
                            <MudButton Class="m-4" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" @onclick="() => AddToCart()">Ajouter au panier</MudButton>
                            break;
                        case "auPanier":
                            <MudButton Class="m-4" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" Href="/panier">Jeu dans le panier</MudButton>
                            break;
                        case "nonSortie":
                            <MudButton Class="m-4" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" Disabled>Sortie prochaine</MudButton>
                            break;
                        case "nonConnecte":
                            <MudButton Class="m-4" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" Href="/Account/Login">Veuillez vous connecter</MudButton>
                            break;
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudPaper>
</div>



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    [Parameter]
    public string Jacquette { get; set; }

    public string ExcpetionAchatJeu { get; set; } = "aucune";

    public Jeu? Jeu { get; set; }

    public Commande? Panier { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Jeu = VaporService.FindJeuByJaquette(Jacquette);
        if(Jeu == null) // cas ou le jeu n'existe pas
        {
            navManager.NavigateTo("/", true);
        }
        var authState = await authenticationState;
        Utilisateur? utilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);
        if (utilisateur != null) // cas utilisateur connecté
        {
            Panier = VaporService.FindCommandeNonTermineByUtilisateur(utilisateur);
            ContenuCommande? contenuCommande = VaporService.FindContenuCommandesByUtilisateurAndJeuAndCommandeNonTerminee(utilisateur, Jeu);
            if (contenuCommande != null) // on interdit au client de commander deux fois un même jeu
            {
                ExcpetionAchatJeu = "auPanier";
            }
            if (Jeu.Prix == null) // cas jeu non sortie
            {
                ExcpetionAchatJeu = "nonSortie";
            }
        }
        else // cas utilisateur non connecté
        {
            ExcpetionAchatJeu = "nonConnecte";
        }
    }

    /*
     * Ajoute le jeu au panier de l'utilisateur
     */
    private async void AddToCart()
    {
        var authState = await authenticationState;
        Utilisateur utilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);
        if (Panier == null) // cas ou le client n'a pas encore d'élément dans son panier
        {
            Panier = new Commande();
            Panier.UtilisateurId = utilisateur.Id;
            Panier.EstTermine = false;
            VaporService.InsertCommande(Panier);
        }
        ContenuCommande contenuCommande = new ContenuCommande();
        contenuCommande.CommandeId = Panier.Id;
        contenuCommande.UtilisateurId = Panier.UtilisateurId;
        contenuCommande.JeuId = Jeu.Id;
        contenuCommande.Quantite = 1;
        VaporService.InsertContenuCommande(contenuCommande);
        ExcpetionAchatJeu = "auPanier";
        Snackbar.Add("Jeu ajouté au panier", Severity.Success);
    }

}
