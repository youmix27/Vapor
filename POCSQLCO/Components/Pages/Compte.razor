@page "/compte"
@using Microsoft.AspNetCore.Authorization
@using POCSQLCO.Models
@using Microsoft.AspNetCore.Cryptography.KeyDerivation;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@using POCSQLCO.Models.ViewModels
@inject Models.IVaporService VaporService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Mon Compte</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudGrid>
        <MudItem xs="12" sm="7">
            <EditForm Model=@oldUtilisateur OnValidSubmit="UpdateUtilisateur">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4"> Mon compte </MudText>
                    <MudTextField @bind-Value="oldUtilisateur.Pseudo" For="@(() => oldUtilisateur.Pseudo)" Label="Pseudo" />
                    <MudTextField @bind-Value="oldUtilisateur.Email" For="@(() => oldUtilisateur.Email)" Label="Mail" />
                    <MudTextField @bind-Value="oldUtilisateur.Nom" For="@(() => oldUtilisateur.Nom)" Label="Nom" />
                    <MudTextField @bind-Value="oldUtilisateur.Prenom" For="@(() => oldUtilisateur.Prenom)" Label="Prenom" />
                    <MudTextField @bind-Value="oldUtilisateur.Ville" For="@(() => oldUtilisateur.Ville)" Label="Ville" />
                    <MudTextField @bind-Value="oldUtilisateur.CodePostal" For="@(() => oldUtilisateur.CodePostal)" Label="Code Postal" />
                    <MudTextField @bind-Value="oldUtilisateur.Adresse" For="@(() => oldUtilisateur.Adresse)" Label="Adresse" />
                    <MudTextField @bind-Value="oldUtilisateur.Telephone" For="@(() => oldUtilisateur.Telephone)" Label="Numéro de Téléphone" />
                    <MudCheckBox @bind-Value="oldUtilisateur.FiltreCs" Label="Masquer contenu à caractère sexuel"></MudCheckBox>
                    <MudCheckBox @bind-Value="oldUtilisateur.FiltreGore" Label="Masquer contenu à caractère gore"></MudCheckBox>
                </MudPaper>
                <MudPaper Class="pa-4 mt-4">
                    <MudAlert Class="mb-4" Severity="Severity.Error" hidden="@ErrorPseudo">Nom d'utilisateur déjà utilisé par un autre compte'</MudAlert>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" ButtonType="ButtonType.Submit">Sauvegarder</MudButton>
                </MudPaper>
            </EditForm>
            <EditForm Model=@NouveauMotDePasse OnValidSubmit="UpdatePassword">
                <MudPaper Class="pa-4 mt-4">
                    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4"> Modifier Mot de Passe </MudText>
                    <MudTextField @bind-Value="NouveauMotDePasse.AncienPassword" For="@(() => NouveauMotDePasse.AncienPassword)" InputType="InputType.Password" Label="Ancien Mot de Passe" />
                    <MudTextField @bind-Value="NouveauMotDePasse.NouveauPassword" For="@(() => NouveauMotDePasse.NouveauPassword)" InputType="InputType.Password" Label="Nouveau Mot de Passe" />
                    <MudTextField @bind-Value="NouveauMotDePasse.NouveauPassword2" For="@(() => NouveauMotDePasse.NouveauPassword2)" InputType="InputType.Password" Label="Confirmation Nouveau Mot de Passe" />
                </MudPaper>
                <MudPaper Class="pa-4 mt-4">
                    <MudAlert Class="mb-4" Severity="Severity.Error" hidden="@ErrorPassword">Erreur sur l'ancien mot de passe</MudAlert>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" ButtonType="ButtonType.Submit">Sauvegarder</MudButton>
                </MudPaper>
            </EditForm>
        </MudItem>
    </MudGrid>
</MudContainer>



@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    [SupplyParameterFromForm]
    public NouveauMotDePasse NouveauMotDePasse { get; set; } = new NouveauMotDePasse();

    public Utilisateur oldUtilisateur { get; set; } = new Utilisateur();
    public bool ErrorPassword { get; set; } = true;
    public bool ErrorPseudo { get; set; } = true;


    protected override async void OnInitialized()
    {
        var authState = await authenticationState;
        oldUtilisateur = VaporService.FindUtilisateurByPseudo(authState.User.Identity.Name);

    }

    private async Task UpdateUtilisateur(EditContext context)
    {
        Utilisateur utilisateurVerificationPseudoDouble = VaporService.FindUtilisateurByPseudo(oldUtilisateur.Pseudo);
        var authState = await authenticationState;
        if (oldUtilisateur.Pseudo != authState.User.Identity.Name && utilisateurVerificationPseudoDouble != null) // si le pseudo a été changé, on vérifit que celui ci ne soit pas utilisé par un autre compte
        {
            ErrorPseudo = false;
            return;
        }
        VaporService.UpdateUtilisateur(oldUtilisateur);
        Snackbar.Add("Compte mise à jour", Severity.Success);
    }

    private void UpdatePassword()
    {
        if (BCrypt.Net.BCrypt.Verify(NouveauMotDePasse.AncienPassword, oldUtilisateur.HashMdp))
        {
            oldUtilisateur.HashMdp = BCrypt.Net.BCrypt.HashPassword(NouveauMotDePasse.NouveauPassword);
            VaporService.UpdateUtilisateur(oldUtilisateur);
            ErrorPassword = true;
            Snackbar.Add("Mot de passe mise à jour", Severity.Success);
        }
        else
        {
            ErrorPassword = false;
        }

    }

    
}